// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file auth/v1/auth.proto (package auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Request to get WOFF OAuth authorization URL
 *
 * @generated from message auth.v1.GetAuthorizationURLRequest
 */
export class GetAuthorizationURLRequest extends Message<GetAuthorizationURLRequest> {
  /**
   * @generated from field: string redirect_uri = 1;
   */
  redirectUri = "";

  /**
   * CSRF protection state
   *
   * @generated from field: string state = 2;
   */
  state = "";

  /**
   * Optional scopes
   *
   * @generated from field: repeated string scopes = 3;
   */
  scopes: string[] = [];

  constructor(data?: PartialMessage<GetAuthorizationURLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.GetAuthorizationURLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "redirect_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthorizationURLRequest {
    return new GetAuthorizationURLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthorizationURLRequest {
    return new GetAuthorizationURLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthorizationURLRequest {
    return new GetAuthorizationURLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthorizationURLRequest | PlainMessage<GetAuthorizationURLRequest> | undefined, b: GetAuthorizationURLRequest | PlainMessage<GetAuthorizationURLRequest> | undefined): boolean {
    return proto3.util.equals(GetAuthorizationURLRequest, a, b);
  }
}

/**
 * Response containing the authorization URL
 *
 * @generated from message auth.v1.GetAuthorizationURLResponse
 */
export class GetAuthorizationURLResponse extends Message<GetAuthorizationURLResponse> {
  /**
   * @generated from field: string authorization_url = 1;
   */
  authorizationUrl = "";

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  constructor(data?: PartialMessage<GetAuthorizationURLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.GetAuthorizationURLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authorization_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthorizationURLResponse {
    return new GetAuthorizationURLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthorizationURLResponse {
    return new GetAuthorizationURLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthorizationURLResponse {
    return new GetAuthorizationURLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthorizationURLResponse | PlainMessage<GetAuthorizationURLResponse> | undefined, b: GetAuthorizationURLResponse | PlainMessage<GetAuthorizationURLResponse> | undefined): boolean {
    return proto3.util.equals(GetAuthorizationURLResponse, a, b);
  }
}

/**
 * Request to exchange authorization code for tokens
 *
 * @generated from message auth.v1.ExchangeCodeRequest
 */
export class ExchangeCodeRequest extends Message<ExchangeCodeRequest> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  /**
   * @generated from field: string redirect_uri = 2;
   */
  redirectUri = "";

  /**
   * CSRF verification
   *
   * @generated from field: string state = 3;
   */
  state = "";

  constructor(data?: PartialMessage<ExchangeCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.ExchangeCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "redirect_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExchangeCodeRequest {
    return new ExchangeCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExchangeCodeRequest {
    return new ExchangeCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExchangeCodeRequest {
    return new ExchangeCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExchangeCodeRequest | PlainMessage<ExchangeCodeRequest> | undefined, b: ExchangeCodeRequest | PlainMessage<ExchangeCodeRequest> | undefined): boolean {
    return proto3.util.equals(ExchangeCodeRequest, a, b);
  }
}

/**
 * Response containing WOFF access tokens and user info
 *
 * @generated from message auth.v1.ExchangeCodeResponse
 */
export class ExchangeCodeResponse extends Message<ExchangeCodeResponse> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string refresh_token = 2;
   */
  refreshToken = "";

  /**
   * @generated from field: int64 expires_in = 3;
   */
  expiresIn = protoInt64.zero;

  /**
   * @generated from field: string token_type = 4;
   */
  tokenType = "";

  /**
   * @generated from field: repeated string scope = 5;
   */
  scope: string[] = [];

  /**
   * User information (included for convenience)
   *
   * @generated from field: string user_id = 6;
   */
  userId = "";

  /**
   * @generated from field: string user_name = 7;
   */
  userName = "";

  /**
   * @generated from field: string email = 8;
   */
  email = "";

  /**
   * @generated from field: string display_name = 9;
   */
  displayName = "";

  /**
   * @generated from field: string domain_id = 10;
   */
  domainId = "";

  /**
   * @generated from field: repeated string roles = 11;
   */
  roles: string[] = [];

  /**
   * @generated from field: string profile_image_url = 12;
   */
  profileImageUrl = "";

  constructor(data?: PartialMessage<ExchangeCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.ExchangeCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expires_in", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "token_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "scope", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "domain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "profile_image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExchangeCodeResponse {
    return new ExchangeCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExchangeCodeResponse {
    return new ExchangeCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExchangeCodeResponse {
    return new ExchangeCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExchangeCodeResponse | PlainMessage<ExchangeCodeResponse> | undefined, b: ExchangeCodeResponse | PlainMessage<ExchangeCodeResponse> | undefined): boolean {
    return proto3.util.equals(ExchangeCodeResponse, a, b);
  }
}

/**
 * Empty - user info will be extracted from WOFF token in metadata
 *
 * @generated from message auth.v1.GetProfileRequest
 */
export class GetProfileRequest extends Message<GetProfileRequest> {
  constructor(data?: PartialMessage<GetProfileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.GetProfileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfileRequest {
    return new GetProfileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfileRequest {
    return new GetProfileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfileRequest {
    return new GetProfileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfileRequest | PlainMessage<GetProfileRequest> | undefined, b: GetProfileRequest | PlainMessage<GetProfileRequest> | undefined): boolean {
    return proto3.util.equals(GetProfileRequest, a, b);
  }
}

/**
 * @generated from message auth.v1.GetProfileResponse
 */
export class GetProfileResponse extends Message<GetProfileResponse> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string display_name = 4;
   */
  displayName = "";

  /**
   * @generated from field: string domain_id = 5;
   */
  domainId = "";

  /**
   * @generated from field: repeated string roles = 6;
   */
  roles: string[] = [];

  /**
   * @generated from field: string profile_image_url = 7;
   */
  profileImageUrl = "";

  constructor(data?: PartialMessage<GetProfileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.GetProfileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "domain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "roles", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "profile_image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProfileResponse {
    return new GetProfileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProfileResponse {
    return new GetProfileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProfileResponse {
    return new GetProfileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProfileResponse | PlainMessage<GetProfileResponse> | undefined, b: GetProfileResponse | PlainMessage<GetProfileResponse> | undefined): boolean {
    return proto3.util.equals(GetProfileResponse, a, b);
  }
}

/**
 * @generated from message auth.v1.RefreshTokenRequest
 */
export class RefreshTokenRequest extends Message<RefreshTokenRequest> {
  /**
   * @generated from field: string refresh_token = 1;
   */
  refreshToken = "";

  constructor(data?: PartialMessage<RefreshTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.RefreshTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshTokenRequest {
    return new RefreshTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshTokenRequest {
    return new RefreshTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshTokenRequest {
    return new RefreshTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshTokenRequest | PlainMessage<RefreshTokenRequest> | undefined, b: RefreshTokenRequest | PlainMessage<RefreshTokenRequest> | undefined): boolean {
    return proto3.util.equals(RefreshTokenRequest, a, b);
  }
}

/**
 * @generated from message auth.v1.RefreshTokenResponse
 */
export class RefreshTokenResponse extends Message<RefreshTokenResponse> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: int64 expires_in = 2;
   */
  expiresIn = protoInt64.zero;

  /**
   * @generated from field: string token_type = 3;
   */
  tokenType = "";

  constructor(data?: PartialMessage<RefreshTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.RefreshTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expires_in", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "token_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshTokenResponse {
    return new RefreshTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshTokenResponse {
    return new RefreshTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshTokenResponse {
    return new RefreshTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshTokenResponse | PlainMessage<RefreshTokenResponse> | undefined, b: RefreshTokenResponse | PlainMessage<RefreshTokenResponse> | undefined): boolean {
    return proto3.util.equals(RefreshTokenResponse, a, b);
  }
}

/**
 * @generated from message auth.v1.VerifyTokenRequest
 */
export class VerifyTokenRequest extends Message<VerifyTokenRequest> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  constructor(data?: PartialMessage<VerifyTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.VerifyTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyTokenRequest {
    return new VerifyTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyTokenRequest {
    return new VerifyTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyTokenRequest {
    return new VerifyTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyTokenRequest | PlainMessage<VerifyTokenRequest> | undefined, b: VerifyTokenRequest | PlainMessage<VerifyTokenRequest> | undefined): boolean {
    return proto3.util.equals(VerifyTokenRequest, a, b);
  }
}

/**
 * @generated from message auth.v1.VerifyTokenResponse
 */
export class VerifyTokenResponse extends Message<VerifyTokenResponse> {
  /**
   * @generated from field: bool valid = 1;
   */
  valid = false;

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: int64 expires_at = 3;
   */
  expiresAt = protoInt64.zero;

  /**
   * @generated from field: repeated string scopes = 4;
   */
  scopes: string[] = [];

  constructor(data?: PartialMessage<VerifyTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.v1.VerifyTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valid", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expires_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VerifyTokenResponse {
    return new VerifyTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VerifyTokenResponse {
    return new VerifyTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VerifyTokenResponse {
    return new VerifyTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: VerifyTokenResponse | PlainMessage<VerifyTokenResponse> | undefined, b: VerifyTokenResponse | PlainMessage<VerifyTokenResponse> | undefined): boolean {
    return proto3.util.equals(VerifyTokenResponse, a, b);
  }
}

